---

### Fuente: https://www.acolono.com/en/blog/drupal-kubernetes-getting-started-insights 


- name: Drupal image
  set_fact:
    drupal_image: "drupal:8.6.15-apache"


- name: Set 777 perms for Drupal PV Folder
  file:
    path: "/export/nfs/drupal-pv"
    state: directory
    mode: "0777"
    recurse: yes

- name: Create drupal namespace
  k8s:
    name: drupal
    api_version: v1
    kind: Namespace
    state: present

- name: Drupal PV
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: drupal-pv
        namespace: drupal
          #        annotations:
          #          volume.beta.kubernetes.io/storage-class: "slow"
        labels:
          name: drupal-pv
      spec:
        #https://www.jorgedelacruz.es/2017/12/26/kubernetes-volumenes-nfs/
        #storageClassName: storage-nfs
        volumeMode: Filesystem
        capacity:
          storage: 3Gi
        accessModes:
          - ReadWriteMany
        persistentVolumeReclaimPolicy: Retain
        nfs:
          server: "{{ node_ip }}"
          path: /export/nfs/drupal-pv

- name: Drupal PVC
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: drupal-pvc
        namespace: drupal
        labels:
          app: drupal
      spec:
        accessModes:
        #- ReadWriteOnce
        - ReadWriteMany
        resources:
          requests:
            storage: 3Gi
        volumeMode: Filesystem
        volumeName: drupal-pv
        selector:
          matchLabels:
            name: drupal-pv

- name: Drupal Deployment
  k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: drupal
        namespace: drupal
        labels:
          app: drupal
          tier: frontend
      spec:
        selector:
          matchLabels:
            app: drupal
            tier: frontend
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: drupal
              tier: frontend
          spec:
            initContainers:
              - name: init-sites-volume
                image: "{{ drupal_image }}"
                command: ['/bin/bash', '-c']
                args: ['cp -r /var/www/html/sites /data; chown www-data:www-data /data/ -R']
                volumeMounts:
                - mountPath: /data
                  name: drupal-pvc
            containers:
            - image: "{{ drupal_image }}"
              imagePullPolicy: IfNotPresent
              name: drupal
              env:
              - name: DRUPAL_DATABASE_HOST
                value: drupal-mysql
              - name: DRUPAL_DATABASE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-pass
                    key: password
              ports:
              - containerPort: 80
                name: drupal
              volumeMounts:
              - name: drupal-pvc
                mountPath: /var/www/html/modules
                subPath: modules
              - name: drupal-pvc
                mountPath: /var/www/html/profiles
                subPath: profiles
              - name: drupal-pvc
                mountPath: /var/www/html/sites
                subPath: sites
              - name: drupal-pvc
                mountPath: /var/www/html/themes
                subPath: themes
            volumes:
              - name: drupal-pvc
                persistentVolumeClaim:
                  claimName: drupal-pvc


- name: Drupal secret
  k8s:
    state: present
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: mysql-pass
        namespace: drupal
      type: Opaque
      data:
        # see http://kubernetes.io/docs/user-guide/secrets/#creating-a-secret-using-kubectl-create-secret
        # for creating secrets manually
        # Command-line:  echo -n "Pass1" | base64
        password: UGFzczE=

- name: Drupal Service
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: drupal
        namespace: drupal
        labels:
          app: drupal
      spec:
        type: NodePort
        ports:
        - name: web
          port: 80
          targetPort: 80
          nodePort: 30010 # Verdadero puerto del Nodo (debe ser entre 30000 y 32767)
        #type: LoadBalancer
        #ports:
        #- port: 80
        #  name: web
        #  targetPort: 8010
        selector:
          app: drupal
          tier: frontend




#########################  MYSQL --- Base de datos para Drupal    ############
- name: MySQL image
  set_fact:
    mysql_image: "mysql:5.6"

- name: Set 777 perms for Drupal PV DB Folder
  file:
    path: "/export/nfs/drupal-pv-db"
    state: directory
    mode: "0777"
    recurse: yes

- name: Drupal PV DB
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: drupal-pv-db
        namespace: drupal
          #        annotations:
          #          volume.beta.kubernetes.io/storage-class: "slow"
        labels:
          name: drupal-pv-db
      spec:
        #https://www.jorgedelacruz.es/2017/12/26/kubernetes-volumenes-nfs/
        #storageClassName: storage-nfs
        volumeMode: Filesystem
        capacity:
          storage: 3Gi
        accessModes:
          - ReadWriteMany
        persistentVolumeReclaimPolicy: Retain
        nfs:
          server: "{{ node_ip }}"
          path: /export/nfs/drupal-pv-db

- name: Drupal PVC DB
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: drupal-pvc-db
        namespace: drupal
      spec:
        accessModes:
        - ReadWriteMany
        #- ReadWriteOnce
        resources:
          requests:
            storage: 3Gi
        volumeMode: Filesystem
        volumeName: drupal-pv-db
        selector:
          matchLabels:
            name: drupal-pv-db

- name: Drupal DB deployment
  k8s:
    state: present
    definition:
      kind: Deployment
      metadata:
        name: drupal-mysql
        namespace: drupal
        labels:
          app: drupal        
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: drupal
            tier: backend
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: drupal
              tier: backend
          spec:
            containers:
            - image: "{{ mysql_image }}"
              imagePullPolicy: IfNotPresent
              name: mysql
              env:
              - name: MYSQL_DATABASE
                value: drupal-db
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-pass
                    key: password
              ports:
              - containerPort: 3306
                name: mysql
              volumeMounts:
              - name: mysql-stateful-storage
                mountPath: /var/lib/mysql
            volumes:
              - name: mysql-stateful-storage
                persistentVolumeClaim:
                  claimName: drupal-pvc-db


- name: Drupal DB Service
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: drupal-db
        namespace: drupal
        labels:
          app: drupal
      spec:
        ports:
          - port: 3306
        selector:
          app: drupal
          tier: backend


# vim: ff=unix:ai:et:sw=2:ts=2:
