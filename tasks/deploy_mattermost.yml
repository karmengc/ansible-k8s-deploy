---

### Fuente: https://github.com/iguchikoma/mattermost-kubernetes


# Este repositorio permite instalar Mattermost 6 (solo disponible para amd64)
- name: Mattermost image AMD64 version
  set_fact:
    #mm_image: "mattermost/mattermost-team-edition"
    mm_image: "mattermost/mattermost-prod-app:5.30.2"
    #mm_image: "iotops/mattermost:latest@sha256:389e967e719d3f07b2fdd84036a6b0fd5625bb615f9dab888bb61d8b60867f5e"
  when: cluster_arch == "amd64"

- name: Mattermost image ARM64 version
  set_fact:
    mm_image: "iotops/mattermost:latest@sha256:4640bd9db214a08e37cba67bc4d286a6a4ffd5f0ebc8f0bd70e404572bca1ff5"
  when: cluster_arch == "arm64"

- name: Set 777 perms for PV Folder
  file:
    path: "/export/nfs/mattermost-postgres-pv"
    state: directory
    mode: '0777'
    recurse: yes

- name: Create mattermost namespace
  community.kubernetes.k8s:
    name: mattermost
    api_version: v1
    kind: Namespace
    state: present

- name: Mattermost and Postgres PV
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: mattermost-postgres-pv
          #        annotations:
          #          volume.beta.kubernetes.io/storage-class: "slow"
        labels:
          name: mattermost-postgres-pv
      spec:
        #https://www.jorgedelacruz.es/2017/12/26/kubernetes-volumenes-nfs/
        #storageClassName: storage-nfs
        volumeMode: Filesystem
        capacity:
          storage: 5Gi
        accessModes:
          - ReadWriteMany
        persistentVolumeReclaimPolicy: Retain
        nfs:
          server: "{{ node_ip }}"
          path: /export/nfs/mattermost-postgres-pv

- name: Mattermost and Postgres PVC
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: mattermost-postgres-pvc
        namespace: mattermost
        labels:
          app: postgres
        #annotations:
        #  "volume.beta.kubernetes.io/storage-class": "slow"
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 5Gi
        volumeMode: Filesystem
        volumeName: mattermost-postgres-pv
        selector:
          matchLabels:
            name: mattermost-postgres-pv

- name: Mattermost secret
  k8s:
    state: present
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: mattermost-env
        namespace: mattermost
      type: Opaque
      data:
        # see http://kubernetes.io/docs/user-guide/secrets/#creating-a-secret-using-kubectl-create-secret
        # for creating secrets manually
          # db
        db-host: ZGI=
          # 5432
        db-port: NTQzMg==
          # mmuser
        mm-username: bW11c2Vy
          # mmuser_password
        mm-password: bW11c2VyX3Bhc3N3b3Jk
          # mattermost
        mm-dbname: bWF0dGVybW9zdA==

- name: Mattermost Deployment
  k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: mattermost-app
        labels:
          app: mattermost
          tier: app
        namespace: mattermost
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: mattermost
            tier: app
        strategy:
          type: Recreate
        template:
          metadata:
            name: mattermost-app
            labels:
              app: mattermost
              tier: app
          spec:
            containers:
            - name: mattermost-app
              image: "{{ mm_image }}"
              env:
              - name: DB_HOST
                valueFrom:
                  secretKeyRef:
                    name: mattermost-env
                    key: db-host
              - name: DB_PORT_NUMBER
                valueFrom:
                  secretKeyRef:
                    name: mattermost-env
                    key: db-port
              - name: MM_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: mattermost-env
                    key: mm-username
              - name: MM_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mattermost-env
                    key: mm-password
              - name: MM_DBNAME
                valueFrom:
                  secretKeyRef:
                    name: mattermost-env
                    key: mm-dbname
              volumeMounts:
              - name: appdata
                mountPath: /mattermost/data
              - name: etclocaltime
                mountPath: /etc/localtime
                readOnly: true
            volumes:
            - name: appdata
              persistentVolumeClaim:
                claimName: mattermost-postgres-pvc
            - name: etclocaltime
              hostPath:
                path: /etc/localtime


- name: Mattermost Service
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: mattermost
        namespace: mattermost
        labels:
          app: mattermost
      spec:
        type: NodePort
        ports:
        - port: 80
          targetPort: 8000
          name: http
          nodePort: 30001
        selector:
          app: mattermost


#########################  POSTGRES --- Base de datos para Mattermost    ############

- name: Postgres configmap
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: postgres-config
        labels:
          app: postgres
        namespace:
          mattermost
      data:
        POSTGRES_DB: mattermost
        POSTGRES_USER: mmuser
        POSTGRES_PASSWORD: mmuser_password


- name: Postgres image AMD64 version
  set_fact:
    pg_image: "postgres:9"
  when: cluster_arch == "amd64"

- name: Postgres image AMD64 version
  set_fact:
    pg_image: "arm64v8/postgres:9"
  when: cluster_arch == "arm64"


- name: Postgres deployment
  k8s:
    state: present
    definition:
      kind: Deployment
      metadata:
        name: postgres
        namespace: mattermost
        labels:
          app: postgres
      spec:
        selector:
          matchLabels:
            app: postgres
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: postgres
          spec:
            containers:
            - image: "{{ pg_image }}"
              name: postgres
              imagePullPolicy: IfNotPresent
              ports:
              - containerPort: 5432
                name: postgres
              envFrom:
                - configMapRef:
                    name: postgres-config
              volumeMounts:
              - name: mattermost-postgres-pv
                mountPath: /var/lib/postgresql/data 
            volumes:
            - name: mattermost-postgres-pv
              persistentVolumeClaim:
                claimName: mattermost-postgres-pvc


- name: Postgres Service
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        labels:
          app: postgres
        name: db
        namespace: mattermost
      spec:
        ports:
        - port: 5432
          targetPort: 5432
        selector:
          app: postgres



# vim: ff=unix:ai:et:sw=2:ts=2:
