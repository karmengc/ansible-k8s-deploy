---

- name: Registry image AMD arch
  set_fact:
    registry_image: "registry:2"
  when: cluster_arch == "amd64"

- name: Registry image ARM64 arch
  set_fact:
    registry_image: "arm64v8/registry:latest"
  when: cluster_arch == "arm64"

- name: Asegurar que la imagen del contenedor de registro est√° presente
  docker_image:
    name: "{{ registry_image }}"
    source: pull

- name: Crear carpeta var lib registry
  file:
    path: "/var/lib/registry"
    state: directory
    group: docker

- name: Crear carpeta confd para certificados
  file:
    path: "/var/lib/registry/conf.d"
    state: directory

- name: Copiar certificados en confd
  copy:
    src: "/opt/certs/{{ item }}"
    dest: "/var/lib/registry/conf.d"
    remote_src: yes
  with_items:
    - registry.key
    - registry.crt

- name: Ejecutar contenedor de registro localmente
  docker_container:
    name: registry
    image: "{{ registry_image }}"
    state: started
    env:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: "/registry_data"
      REGISTRY_HTTP_TLS_KEY: "/registry_data/conf.d/registry.key"
      REGISTRY_HTTP_TLS_CERTIFICATE: "/registry_data/conf.d/registry.crt"
    published_ports:
     # Publish container port 5000 as host port 5000
     - "5000:5000"
    volumes:
      - /var/lib/registry:/registry_data

# iptables -I INPUT -p tcp -m tcp --dport 5000 -j ACCEPT
# service iptables save
- name: Allow new incoming packets on TCP port 5000
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 5000
    jump: ACCEPT
    comment: Accept Docker Registry connections.

