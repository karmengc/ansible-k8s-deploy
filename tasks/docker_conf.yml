---

#- name: Añadir línea en configuración de docker
#  lineinfile:
#    path: /etc/default/docker
#    line: "DOCKER_OPTS=\"--config-file=/etc/docker/daemon.json\""
#    insertafter: EOF
#
#- name: Añadir línea en configuración de docker daemon
#  lineinfile:
#    path: /etc/docker/daemon.json
#    line: "{ \"insecure-registries\":[\"master:5000\"] }"
#    insertafter: EOF
#    create: yes

- name: Asegurar que la imagen del contenedor de registro está presente
  docker_image:
    name: "registry:2"
    source: pull

- name: Crear carpeta var lib registry
  file:
    path: "/var/lib/registry"
    state: directory
    group: docker

- name: Crear carpeta confd para certificados
  file:
    path: "/var/lib/registry/conf.d"
    state: directory

- name: Copiar certificados en confd
  copy:
    src: "/opt/certs/{{ item }}"
    dest: "/var/lib/registry/conf.d"
    remote_src: yes
  with_items:
    - registry.key
    - registry.crt

- name: Ejecutar contenedor de registro localmente
  docker_container:
    name: registry
    image: "registry:2"
    state: started
    env:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: "/registry_data"
      REGISTRY_HTTP_TLS_KEY: "/registry_data/conf.d/registry.key"
      REGISTRY_HTTP_TLS_CERTIFICATE: "/registry_data/conf.d/registry.crt"
    published_ports:
     # Publish container port 5000 as host port 5000
     - "5000:5000"
    volumes:
      - /var/lib/registry:/registry_data

# iptables -I INPUT -p tcp -m tcp --dport 5000 -j ACCEPT
# service iptables save
- name: Allow new incoming packets on TCP port 5000
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 5000
    jump: ACCEPT
    comment: Accept Docker Registry connections.

- name: Get existing image
  shell: |
    docker image inspect master:5000/hello-go
  register: image_exists
  ignore_errors: yes
  changed_when: false

    #- name: Log into private registry and force re-authorization
    #  become_user: "{{ provision_cluster_user }}"
    #  docker_login:
    #    #registry: "http://192.168.130.150:5000"
    #    registry: "https://master:5000"
    #    username: "{{ provision_cluster_user }}"
    #    password: "{{ provision_cluster_user_passwd }}"
    #    tls: yes
    #    ca_cert: "/opt/certs/ca.pem"
    #    client_cert: "/opt/certs/registry.crt"
    #    #client_cert: "/opt/certs/cert.pem"
    #    client_key: "/opt/certs/registry.key"
    #    #client_key: "/opt/certs/key.pem"
    #    #validate_certs: yes
    #    reauthorize: yes
    #  register: docker_login

- name: build hellogo container image
  #community.general.docker_image:
  docker_image:
    #name: "192.168.130.150:5000/hello-go:latest"
    #name: "master:5000/hello-go:latest"
    name: "hello-go"
    tag: "latest"
    build:
      path: "/mnt/nfs/hello-go"
    source: build
    state: present
  when: image_exists.rc == 1

- name: push hellogo container image to local registry
  docker_image:
    #name: "192.168.130.150:5000/hello-go"
    #name: "master:5000/hello-go"
    name: "hello-go"
    tag: "latest"
    #repository: "192.168.130.150:5000/hello-go:latest"
    #repository: "master:5000/hello-go:latest"
    repository: "master:5000/hello-go"
    push: true
    source: local
      #    state: present
  when: image_exists.rc == 1

    #- name: Add docker login as secret at Kubernetes
    #  become_user: "{{ provision_cluster_user }}"
    #  shell: |
    #    kubectl create secret generic regcred \
    #    --from-file=.dockerconfigjson=/home/{{ provision_cluster_user }}/.docker/config.json \
    #    --type=kubernetes.io/dockerconfigjson
    #  when: docker_login.changed

    #- name: Read credentiales docker file
    #  slurp: 
    #    src: "/home/{{ provision_cluster_user }}/.docker/config.json"
    #  register: docker_login_cred_file 
    # 
    #- name: display file content (undecoded) 
    #  debug: 
    #    var: docker_login_cred_file.content
    #  
    #- name: display file content (decoded) 
    #  debug: 
    #    var: docker_login_cred_file.content | b64encode
    #
    #- name: Create Docker secret at Kubernetes
    #  k8s:
    #    state: present
    #    definition: 
    #      apiVersion: v1
    #      kind: Secret
    #      metadata:
    #        name: "regcred"
    #        namespace: "default"     
    #      data:
    #        .dockerconfigjson: '{{ docker_login_cred_file.content }}'
    #      type: kubernetes.io/dockerconfigjson
    #
