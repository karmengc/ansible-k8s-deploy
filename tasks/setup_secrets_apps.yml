---
- name: Create directory for openssl certs
  file:
    path: "{{ deployment_dir }}/ssl/certs"
    state: directory
    mode: 0700
      
- name: Check if tls secret "tls-certificate" already exists
  shell: kubectl get secrets -n{{ item.key }} | grep tls-{{ item.key }}-certificate
  delegate_to: master
  run_once: true
  with_dict: '{{ apps_to_deploy }}'
  register: check_tls_secret
  ignore_errors: true
  when: item.key != "monitoring.grafana"

- name: Generate SSL key and certificate
  shell: |
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
      -keyout {{ deployment_dir }}/ssl/certs/nginx-selfsigned-{{ item.key }}.key \
      -out {{ deployment_dir }}/ssl/certs/nginx-selfsigned-{{ item.key }}.crt \
      -subj "/CN={{ item.key }}.{{ fqdn }}"
  with_dict: "{{ apps_to_deploy }}"
  when: check_tls_secret is failed and item.key != "monitoring.grafana"

- name: Create tls secret
  shell: kubectl create secret tls tls-{{ item.key }}-certificate --key {{ deployment_dir }}/ssl/certs/nginx-selfsigned-{{ item.key }}.key --cert {{ deployment_dir }}/ssl/certs/nginx-selfsigned-{{ item.key }}.crt -n{{ item.key }}
  with_dict: "{{ apps_to_deploy }}"
  when: check_tls_secret is failed and item.key != "monitoring.grafana"
  ignore_errors: true  # ignora cuando se vuelve a intentar crear un secret ya creado

- name: Check if "tls-dhparam" secret already exists
  shell: kubectl get secrets -n{{ item.key }} | grep tls-{{ item.key }}-dhparam
  delegate_to: master
  with_dict: "{{ apps_to_deploy }}"
  run_once: true
  register: check_dhparam_secret
  ignore_errors: true
  when: item.key != "monitoring.grafana"

- name: Generate X bit dhparam.pem file (this may take a while)
  shell: openssl dhparam -out {{ deployment_dir }}/ssl/certs/dhparam-{{ item.key }}.pem 2048
  with_dict: "{{ apps_to_deploy }}"
  when: (check_tls_secret is failed or check_dhparam_secret is failed) and item.key != "monitoring.grafana"

# Fixme
- name: Create tls-dhparam secret
  shell: kubectl create secret generic tls-{{ item.key }}-dhparam --from-file="{{ deployment_dir }}/ssl/certs/dhparam-{{ item.key }}.pem" -n{{ item.key }}
  with_dict: "{{ apps_to_deploy }}"
  when: check_dhparam_secret is failed and item.key != "monitoring.grafana"
  ignore_errors: true  # ignora cuando se vuelve a intentar crear un secret ya creado

# vim: ff=unix:ai:et:sw=2:ts=2:
