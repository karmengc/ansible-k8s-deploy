---
#- name: Create directory for openssl certs
#  file:
#    path: "{{ deployment_dir }}/ssl/certs"
#    state: directory
#    mode: 0700
#
#      # Certificado para Mattermost (pendiente para m√°s aplicaciones)
#      
#- name: Check if tls secret "tls-certificate" already exists
#  shell: kubectl get secrets -n{{ item.key }} | grep tls-certificate
#  delegate_to: master
#  run_once: true
#  with_dict: '{{ apps_to_deploy }}'
#  register: check_tls_secret
#  ignore_errors: true
#
#- name: Generate SSL key and certificate
#  shell: |
#    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
#      -keyout {{ deployment_dir }}/ssl/certs/nginx-selfsigned-{{ item.key }}.key \
#      -out {{ deployment_dir }}/ssl/certs/nginx-selfsigned-{{ item.key }}.crt \
#      -subj "/CN={{ item.key }}.{{ fqdn }}"
#  with_dict: "{{ apps_to_deploy }}"
#  when: check_tls_secret is failed
#
#- name: Create tls secret
#  shell: kubectl create secret tls tls-certificate --key {{ deployment_dir }}/ssl/certs/nginx-selfsigned-{{ item.key }}.key --cert {{ deployment_dir }}/ssl/certs/nginx-selfsigned-{{ item.key }}.crt -n{{ item.key }}
#  with_dict: "{{ apps_to_deploy }}"
#  when: check_tls_secret is failed
#  ignore_errors: true  # ignora cuando se vuelve a intentar crear un secret ya creado
#
#- name: Check if "tls-dhparam" secret already exists
#  shell: kubectl get secrets -n{{ item.key }} | grep tls-dhparam
#  delegate_to: master
#  with_dict: "{{ apps_to_deploy }}"
#  run_once: true
#  register: check_dhparam_secret
#  ignore_errors: true
#
#- name: Generate X bit dhparam.pem file (this may take a while)
#  shell: openssl dhparam -out {{ deployment_dir }}/ssl/certs/dhparam-{{ item.key }}.pem 2048
#  with_dict: "{{ apps_to_deploy }}"
#  when: check_tls_secret is failed or check_dhparam_secret is failed
#
## Fixme
#- name: Create tls-dhparam secret
#  shell: kubectl create secret generic tls-dhparam --from-file="{{ deployment_dir }}/ssl/certs/dhparam-{{ item.key }}.pem" -n{{ item.key }}
#  with_dict: "{{ apps_to_deploy }}"
#  when: check_dhparam_secret is failed
#  ignore_errors: true  # ignora cuando se vuelve a intentar crear un secret ya creado

    #### Dashboard TLS conf (when kubernetes_enable_web_ui = true)

- name: Check if tls secret "tls-dashb-certificate" already exists
  shell: kubectl get secrets -nkubernetes-dashboard | grep tls-dashb-certificate
  delegate_to: master
  run_once: true
  register: check_tls_dashb_secret
  ignore_errors: true

- name: Generate SSL key and certificate
  shell: |
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
      -keyout {{ deployment_dir }}/ssl/certs/nginx-selfsigned-dashb.key \
      -out {{ deployment_dir }}/ssl/certs/nginx-selfsigned-dashb.crt \
      -subj "/CN=dashboard.k8s.ingress.{{ fqdn }}"
  when: check_tls_dashb_secret is failed

- name: Create tls secret dashb
  shell: kubectl create secret tls tls-dashb-certificate --key {{ deployment_dir }}/ssl/certs/nginx-selfsigned-dashb.key --cert {{ deployment_dir }}/ssl/certs/nginx-selfsigned-dashb.crt -nkubernetes-dashboard
  when: check_tls_dashb_secret is failed

- name: Check if "tls-dashb-dhparam" secret already exists
  shell: kubectl get secrets -nkubernetes-dashboard | grep tls-dashb-dhparam
  delegate_to: master
  run_once: true
  register: check_dhparam_dashb_secret
  ignore_errors: true

- name: Generate X bit dhparam.pem file (this may take a while)
  shell: openssl dhparam -out {{ deployment_dir }}/ssl/certs/dhparam_dashb.pem 2048
  when: check_tls_dashb_secret is failed

# Fixme
- name: Create tls-dhparam secret
  shell: kubectl create secret generic tls-dashb-dhparam --from-file="{{ deployment_dir }}/ssl/certs/dhparam_dashb.pem" -nkubernetes-dashboard
  when: check_dhparam_dashb_secret is failed

